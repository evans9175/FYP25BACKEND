datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  QA
  AUDITOR
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  role      Role     @default(ADMIN)
  organizationId Int          // Foreign key
  organization   Organization @relation("OrganizationMembers", fields: [organizationId], references: [id])
  teamId Int? // Foreign key to Team
  team Team? @relation("TeamMembers", fields: [teamId], references: [id])
  // ONE-TO-ONE: User can register only one organization
  registeredOrganization Organization? @relation("RegisteredBy")

  qualityChecksCreated QualityCheck[] @relation("UserCreatedQualityChecks")
  qualityReportsUploaded QualityReport[] @relation("UserUploadedQualityReports")
  auditsCalled Audit[] @relation("UserCalledAudits")
  auditReportsCreated AuditReport[] @relation("UserCreatedAuditReports")
}

model Organization {
  id        Int      @id @default(autoincrement())
  registeredById Int @unique // Make this UNIQUE for one-to-one
  registeredBy User @relation("RegisteredBy", fields: [registeredById], references: [id])
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   User[]   @relation("OrganizationMembers")
  teams     Team[]   @relation("OrganizationTeams")

  qualityChecks QualityCheck[]
  audits Audit[]
}

model Team {
  id        Int      @id @default(autoincrement())
  organizationId Int // Foreign key to Organization
  organization   Organization @relation("OrganizationTeams", fields: [organizationId], references: [id])
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   User[]   @relation("TeamMembers")
}

model QualityCheck {
  id             Int      @id @default(autoincrement())
  name           String
  description    String?
  createdAt      DateTime @default(now())
  createdById    Int
  createdBy      User     @relation("UserCreatedQualityChecks", fields: [createdById], references: [id])
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  benchmarks     Benchmark[]
  reports        QualityReport[]
}

model Benchmark {
  id             Int      @id @default(autoincrement())
  name           String
  value          String
  qualityCheckId Int
  qualityCheck   QualityCheck @relation(fields: [qualityCheckId], references: [id])
}

model QualityReport {
  id             Int      @id @default(autoincrement())
  fileUrl        String
  uploadedAt     DateTime @default(now())
  uploadedById   Int
  uploadedBy     User     @relation("UserUploadedQualityReports", fields: [uploadedById], references: [id])
  qualityCheckId Int
  qualityCheck   QualityCheck @relation(fields: [qualityCheckId], references: [id])
}

model Audit {
  id             Int      @id @default(autoincrement())
  name           String
  description    String?
  calledById     Int
  calledBy       User     @relation("UserCalledAudits", fields: [calledById], references: [id])
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime @default(now())
  reports        AuditReport[]
}

model AuditReport {
  id         Int      @id @default(autoincrement())
  fileUrl    String
  auditId    Int
  audit      Audit    @relation(fields: [auditId], references: [id])
  createdAt  DateTime @default(now())
  createdById Int
  createdBy   User    @relation("UserCreatedAuditReports", fields: [createdById], references: [id])
}